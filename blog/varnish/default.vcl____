# upgraded from v3 following this doc: https://www.varnish-cache.org/docs/trunk/whats-new/upgrading.html
# verified with command varnishd -C -f /etc/varnish/default.vcl.v3 > pep3
vcl 4.0;
backend default {
  .host = "127.0.0.1";
  .port = "8080";
}
# Called after a document has been successfully retrieved from the backend.
sub vcl_backend_response {
    # Uncomment to make the default cache "time to live" is 5 minutes, handy
    # but it may cache stale pages unless purged. (TODO)
    # By default Varnish will use the headers sent to it by Apache (the backend server)
    # to figure out the correct TTL.
    # WP Super Cache sends a TTL of 3 seconds, set in wp-content/cache/.htaccess
 
    set beresp.ttl   = 24h;
 
    # Strip cookies for static files and set a long cache expiry time.
    if (bereq.url ~ "\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|pdf|txt|tar|wav|bmp|rtf|js|flv|swf|html|htm)$") {
            unset beresp.http.set-cookie;
            set beresp.ttl   = 24h;
    }
 
    # If WordPress cookies found then page is not cacheable
    if (bereq.http.host == "splunk.cortinasval.cat" || bereq.http.Cookie ~"(wp-postpass|wordpress_logged_in|comment_author_)") {
       # set beresp.cacheable = false;#versions less than 3
    #beresp.ttl>0 is cacheable so 0 will not be cached
    set beresp.ttl = 0s;
    } else {
       # set beresp.cacheable = true;
    set beresp.ttl=24h;#cache for 24hrs
    }
 
    # Varnish determined the object was not cacheable
    #if ttl is not > 0 seconds then it is cachebale
    if (!beresp.ttl > 0s) {
        set beresp.http.X-Cacheable = "NO:Not Cacheable";
    } else if ( bereq.http.Cookie ~"(wp-postpass|wordpress_logged_in|comment_author_)" ) {
        # You don't wish to cache content for logged in users
        set beresp.http.X-Cacheable = "NO:Got Session";
        #return(hit_for_pass); #previously just pass but changed in v3+
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
        return (deliver);
    }  else if ( beresp.http.Cache-Control ~ "private") {
        # You are respecting the Cache-Control=private header from the backend
        set beresp.http.X-Cacheable = "NO:Cache-Control=private";
        #return(hit_for_pass);
        set beresp.uncacheable = true;
        set beresp.ttl = 120s;
        return (deliver);
    } else if ( beresp.ttl < 1s ) {
        # You are extending the lifetime of the object artificially
        set beresp.ttl   = 300s;
        set beresp.grace = 300s;
        set beresp.http.X-Cacheable = "YES:Forced";
    } else {
        # Varnish determined the object was cacheable
        set beresp.http.X-Cacheable = "YES";
    }
    if (beresp.status == 404 || beresp.status >= 500) {
        set beresp.ttl = 0s;
    }
 
    # Deliver the content
    return(deliver);
}
 
sub vcl_hash {
    # Each cached page has to be identified by a key that unlocks it.
    # Add the browser cookie only if a WordPress cookie found.
    if ( req.http.Cookie ~"(wp-postpass|wordpress_logged_in|comment_author_)" ) {
        #set req.hash += req.http.Cookie;
    hash_data(req.http.Cookie);
     }
}
 
# Deliver
sub vcl_deliver {
    if (obj.hits > 0) {
        set resp.http.X-Cache = "http-HIT-MEM";
    } else {
        set resp.http.x-Cache = "http-MISS";
    }

    # Uncomment these lines to remove these headers once you've finished setting up Varnish.
    #unset resp.http.X-Varnish;
    #unset resp.http.Via;
    #unset resp.http.Age;
    #unset resp.http.X-Powered-By;
}
 
# vcl_recv is called whenever a request is received
sub vcl_recv {
    # remove ?ver=xxxxx strings from urls so css and js files are cached.
    # Watch out when upgrading WordPress, need to restart Varnish or flush cache.
    set req.url = regsub(req.url, "\?ver=.*$", "");
 
    # Remove "replytocom" from requests to make caching better.
    set req.url = regsub(req.url, "\?replytocom=.*$", "");
 
    unset req.http.X-Forwarded-For;
    set    req.http.X-Forwarded-For = client.ip;
 
    # Exclude this site because it breaks if cached
    #if ( req.http.host == "example.com" ) {
    #    return( pass );
    #}
 
    # Serve objects up to 2 minutes past their expiry if the backend is slow to respond.
    #set req.grace = 120s;
    # Strip cookies for static files:
    if (req.url ~ "\.(jpg|jpeg|gif|png|ico|css|zip|tgz|gz|rar|bz2|pdf|txt|tar|wav|bmp|rtf|js|flv|swf|html|htm)$") {
        unset req.http.Cookie;
        return(hash);
    }
    # Remove has_js and Google Analytics __* cookies.
    set req.http.Cookie = regsuball(req.http.Cookie, "(^|;\s*)(__[a-z]+|has_js)=[^;]*", "");
    # Remove a ";" prefix, if present.
    set req.http.Cookie = regsub(req.http.Cookie, "^;\s*", "");
    # Remove empty cookies.
    if (req.http.Cookie ~ "^\s*$") {
        unset req.http.Cookie;
    }
    if (req.method == "PURGE") {
        if (!client.ip ~ purgehosts) {
                #error 405 "Not allowed.";
                return (synth(405, "Not allowed."));
        }
    #previous version ban() was purge()
        ban("req.url ~ " + req.url + " && req.http.host == " + req.http.host);
        #error 200 "Purged.";
	return (synth(200, "Purged."));
    }
 
    # Pass anything other than GET and HEAD directly.
    if (req.method != "GET" && req.method != "HEAD") {
        return( pass );
    }      /* We only deal with GET and HEAD by default */
 
    # remove cookies for comments cookie to make caching better.
    set req.http.cookie = regsub(req.http.cookie, "1231111111111111122222222333333=[^;]+(; )?", "");
 
    # never cache the admin pages, or the server-status page, or your feed? you may want to..i don't
    if (req.method == "GET" && (req.url ~ "(wp-admin|bb-admin|server-status|feed)")) {
        return(pipe);
    }
    # don't cache authenticated sessions
    if (req.http.Cookie && req.http.Cookie ~ "(wordpress_|PHPSESSID)") {
        return(hash);
    }
    # don't cache ajax requests
    if(req.http.X-Requested-With == "XMLHttpRequest" || req.url ~ "nocache" || req.url ~
"(control.php|wp-comments-post.php|wp-login.php|bb-login.php|bb-reset-password.php|register.php)") {
        return (pass);
    }
    return(hash);
}
 
#set of hosts/users from which purging can be done
acl purgehosts {
    "localhost";
    "www.domain.com";
}
